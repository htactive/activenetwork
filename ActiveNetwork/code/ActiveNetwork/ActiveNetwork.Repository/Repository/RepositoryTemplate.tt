<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<# 
var entities = new List<EntityMetadataRender>(){
new EntityMetadataRender(){Name = "User"},
new EntityMetadataRender(){Name = "UserProfile"},
new EntityMetadataRender(){Name = "Category"},
new EntityMetadataRender(){Name = "ANEvent"},
new EntityMetadataRender(){Name = "ANEventInformation"},
new EntityMetadataRender(){Name = "Role"},
new EntityMetadataRender(){Name = "ANEventRequestToJoin"},
new EntityMetadataRender(){Name = "Gender"},
new EntityMetadataRender(){Name = "Image"},
new EntityMetadataRender(){Name = "ANEventImage"},
new EntityMetadataRender(){Name = "ANEventMember"},
new EntityMetadataRender(){Name = "ANEventUserFavourite"},
};
  var fileManager = EntityFrameworkTemplateFileManager.Create(this); 
  fileManager.StartHeader(); 
#><#
foreach(var entity in entities){
    fileManager.StartNewFile(entity.Name+"Repository.cs"); 
    #>using ActiveNetwork.Entities;

namespace ActiveNetwork.Repository
{
    public partial class <#=entity.Name#>Repository : BaseRepository<<#=entity.Name#>, ANDBEntities>, I<#=entity.Name#>Repository
    {
        public <#=entity.Name#>Repository(IBaseUnitOfWork<ANDBEntities> unitOfWork)
            : base(unitOfWork)
        {

        }
		<# if(!entity.IsOverrideKeyMethod) {#>protected override int GetKeyId(<#=entity.Name#> model)
        {
            return model.<#=entity.IdKey#>;
        }
<#}#>
	}
}

<# 
  }
  fileManager.Process(); 
#>
<#+
public class EntityMetadataRender
{
	public EntityMetadataRender()
	{
		IdKey = "Id";
		IsOverrideKeyMethod = false;
	}
    public string Name{get;set;}
	public string IdKey{get;set;}
	public bool IsOverrideKeyMethod{get;set;}
}
#>